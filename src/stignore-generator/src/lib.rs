use std::path::Path;

/// convert .gitignore to stignore
///
/// # Arguments
/// * `gitignore_dir` - The directory of .gitignore
/// * `gitignore` - The content of .gitignore
fn gitignore_to_stignore(gitignore_dir: &Path, gitignore: &str) -> String {
    let mut stignore = String::new();

    for line in gitignore.lines() {
        let mut line = line.trim();
        if line.is_empty() || line.starts_with("#") {
            continue;
        }

        if line.starts_with("!") {
            stignore += "!";
            line = &line[1..];
        }

        if line.starts_with("/") {
            // absolute path
            stignore += &format!("{}{}\n", gitignore_dir.display(), line);
        } else if line.contains('/') && !line.ends_with('/') {
            stignore += &format!("{}/{}\n", gitignore_dir.display(), line);
        } else {
            stignore += &format!("{}/{}\n", gitignore_dir.display(), line);
            stignore += &format!("{}/**/{}\n", gitignore_dir.display(), line);
        }
    }
    stignore
}

// glob dir and generate stgitignore
fn gen_stgitignore(dir: &Path) -> String {
    let mut stignore = "# This file is generated by stignore-generator. For more infomation, visit https://github.com/117503445/syncthing-code\n.stgitignore\n".to_string();

    glob::glob(&format!("{}/**/.gitignore", dir.display()))
        .unwrap()
        .filter_map(Result::ok)
        .for_each(|path| {
            stignore += &format!("\n## {}\n", path.display());
            let gitignore_dir = path.parent().unwrap();
            let gitignore = std::fs::read_to_string(&path).unwrap();
            stignore += &gitignore_to_stignore(gitignore_dir, &gitignore);
        });

    // debug!("stignore: {}", stignore);
    stignore
}

pub fn write_stgitignore(dir: &Path) {
    let stgitignore = gen_stgitignore(dir);
    std::fs::write(format!("{}/.stgitignore", dir.display()), stgitignore).unwrap();
}

/// write "#include .stgitignore # generated by stignore-generator. For more infomation, visit https://github.com/117503445/syncthing-code" to .stignore
pub fn write_stignore(stignore_file: &Path) {
    const TEXT: &str = "#include .stgitignore # generated by stignore-generator. For more infomation, visit https://github.com/117503445/syncthing-code";
    if !stignore_file.exists() {
        std::fs::write(stignore_file, TEXT).unwrap();
    } else {
        let mut stignore = std::fs::read_to_string(stignore_file).unwrap();
        if !stignore.contains(TEXT) {
            stignore = format!("{}\n{}", stignore, TEXT);
            std::fs::write(stignore_file, stignore).unwrap();
        }
    }
}

#[cfg(test)]
mod tests {
    use std::path::Path;

    use crate::gitignore_to_stignore;

    struct TestCase {
        input: (String, String),
        output: String,
    }

    #[test]
    fn it_works() {
        let test_cases = vec![
            TestCase {
                input: (String::from("/src"), String::from("")),
                output: String::from(""),
            },
            TestCase {
                input: (String::from("/src"), String::from("foo/")),
                output: String::from("/src/foo/\n/src/**/foo/\n"),
            },
        ];

        // test gitignore_to_stignore
        for test_case in test_cases {
            let output = gitignore_to_stignore(Path::new(&test_case.input.0), &test_case.input.1);
            assert_eq!(output, test_case.output);
        }
    }
}
